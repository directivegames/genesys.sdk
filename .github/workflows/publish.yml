name: Publish Binaries

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Bump version
        id: bump-version
        run: |
          npm version ${{ github.event.inputs.bump_type }} --no-git-tag-version
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git add package.json
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}"
          git push

      - name: Set output
        id: set-version
        run: echo "version=${{ steps.bump-version.outputs.new_version }}" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.set-version.outputs.version }}

  build-and-release:
    needs: version-bump
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and publish with electron-builder
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build  # Optional if you build assets first
          npx electron-builder --publish always

  notify:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="✅ *Genesys Launcher release succeeded!*"
            COLOR="#36a64f"
          else
            STATUS="❌ *Genesys Launcher release failed!*"
            COLOR="#ff0000"
          fi

          TEXT="$STATUS, *Version*: \`v${{ needs.version-bump.outputs.version }}\`, <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View on GitHub>"

          PAYLOAD=$(jq -n \
            --arg text "$TEXT" \
            --arg color "$COLOR" \
            '{
              attachments: [{
                color: $color,
                text: $text
              }]
            }')

          curl -X POST -H 'Content-type: application/json' \
               --data "$PAYLOAD" \
               ${{ secrets.GENESYS_SLACK_WEBHOOK_URL }}
